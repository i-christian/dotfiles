# languages.toml
[language-server]
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}
tailwindcss-ls = { command = "tailwindcss-language-server", args = ["--stdio"] }
marksman = { command = "marksman", args = ["server"] }


[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["md", "markdown", "mkd", "mkdn", "mdwn", "mdown", "markdn", "mdtxt", "mdtext", "workbook", { glob = "PULLREQ_EDITMSG" }]
roots = [".marksman.toml"]
language-servers = [ "marksman"]
indent = { tab-width = 2, unit = "  " }
block-comment-tokens = { start = "<!--", end = "-->" }
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}

[[language]]
name = "git-commit"
scope = "git.commitmsg"
file-types = [{ glob = "COMMIT_EDITMSG" }]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
rulers = [51, 73]
text-width = 72

[[language]]
name = "sql"
scope = "source.sql"
file-types = ["sql", "dsql"]
comment-token = "--"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 4, unit = "    " }
injection-regex = "sql"


[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
formatter = { command = "cargo fmt" }
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = [ "rust-analyzer" ]
indent = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["clippy"]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.chainingHints.enable = false
inlayHints.closingBraceHints.enable = false
#inlayHints.closingBraceHints.minLines = 10
#inlayHints.closureReturnTypeHints.enable = "with_block"
#inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.gopls]
command = "gopls"
config = { "gofumpt" = true, "local" = "goimports", "semanticTokens" = true, "staticcheck" = true, "verboseOutput" = true, "analyses" = { "fieldalignment" = true, "nilness" = true, unusedparams = true, unusedwrite = true, useany = true }, usePlaceholders = true, completeUnimported = true, hints = { "assignVariableType" = true, "compositeLiteralFields" = true, "compositeLiteralTypes" = true, "constantValues" = true, "functionTypeParameters" = true, "parameterNames" = true, "rangeVariableTypes" = true } }

[[language]]
name = "go"
roots = ["go.work", "go.mod"]
auto-format = true
comment-token = "//"
language-servers = [ "gopls"]

[[language]]
name = "c"
language-servers =  ["clangd-14"]
auto-format = true
formatter = { command = "clang-format-14", args = ["-style=file"] }
indent = { tab-width = 4, unit = "t" }

[[language]]
name = "templ"
auto-format = true
scope = "source.templ"
injection-regex = "templ"
grammar = "templ"
file-types = ["templ"]
roots = ["go.sum"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
language-servers =  ["templ", "tailwindcss-ls" ]
formatter = { command = "templ" , args = ["fmt"] }

[[language]]
name = "bash"
language-servers = ["bash-language-server"]
formatter = { command = "shfmt" , args = ["-l","-w"]}
auto-format = true
[language-server.bash-language-server]
command = "bash-language-server"


[[language]]
name = "python"
scope = "source.python"
auto-format = true
injection-regex = "(py|python)"
language-id = "python"
file-types = ["py"]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "Poetry.lock"]
comment-token = ["#"]
language-servers = ["pylsp"]
indent = { tab-width = 4, unit = "    " }
formatter = { command = "black", args = ["--quiet","-"] }

[language-server.pylsp.config.pylsp]
plugins.black.enabled = true
plugins.ruff.enabled = true
plugins.ruff.lineLength = 79
plugins.pylsp_mypy = {enabled = true, live_mode = true, strict = false}


# Web development setup
[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }


[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "json"
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true


[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]
config.hostInfo = "helix"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = false
includeInlayFunctionLikeReturnTypeHints = false
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = false
includeInlayPropertyDeclarationTypeHints = false
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = false
includeInlayFunctionLikeReturnTypeHints = false
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = false
includeInlayPropertyDeclarationTypeHints = false
includeInlayVariableTypeHints = false

[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "(js|javascript)"
language-id = "javascript"
file-types = ["js", "mjs", "cjs", "rules", "es6", "pac", { glob = ".node_repl_history" }, { glob = "jakefile" }]
shebangs = ["node"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "typescript-language-server" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
indent = { tab-width = 2, unit = "  " }
auto-format = true

[[language]]
name = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
language-id = "javascriptreact"
file-types = ["jsx"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "typescript-language-server", "tailwindcss-ls" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
indent = { tab-width = 2, unit = "  " }
grammar = "javascript"
auto-format = true 

[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "(ts|typescript)"
language-id = "typescript"
file-types = ["ts", "mts", "cts"]
shebangs = ["deno", "bun", "ts-node"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
language-servers = [ "typescript-language-server" ]
indent = { tab-width = 2, unit = "  " }
auto-format = true

[[language]]
name = "tsx"
scope = "source.tsx"
injection-regex = "(tsx)" # |typescript
language-id = "typescriptreact"
file-types = ["tsx"]
auto-format = true
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
language-servers = [ "typescript-language-server", "tailwindcss-ls" ]
indent = { tab-width = 2, unit = "  " }


[[language]]
name = "html"
scope = "text.html.basic"
injection-regex = "html"
file-types = ["html", "htm", "shtml", "xhtml", "xht", "jsp", "asp", "aspx", "jshtm", "volt", "rhtml"]
block-comment-tokens = { start = "<!--", end = "-->" }
language-servers = ["tailwindcss-ls" ,"vscode-html-language-server"]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "css"
scope = "source.css"
injection-regex = "css"
file-types = ["css", "scss"]
indent = { tab-width = 2, unit = "  " }
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "vscode-css-language-server", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

[[language]]
name = "scss"
scope = "source.scss"
injection-regex = "scss"
file-types = ["scss"]
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = [ "vscode-css-language-server" ]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[language-server.docker-langserver]
command = "docker-langserver"
args = ["--stdio"]

[language-server.docker-compose-langserver]
command = "docker-compose-langserver"
args = ["--stdio"]

[[language]]
name = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
roots = ["Dockerfile", "Containerfile"]
language-servers = [ "docker-langserver" ]


[[language]]
name = "docker-compose"
scope = "source.yaml.docker-compose"
roots = ["docker-compose.yaml", "docker-compose.yml", "compose.yml", "compose.yaml"]
language-servers = [ "docker-compose-langserver" ]
file-types = [{ glob = "docker-compose.yaml" }, { glob = "docker-compose.yml" }, { glob = "compose.yml"}, {glob = "compose.yaml"}]


[language-server.haskell-language-server]
command = "haskell-language-server-wrapper"
args = ["--lsp"] 

[[language]]
name = "haskell"
scope = "source.haskell"
injection-regex = "hs|haskell"
file-types = ["hs", "hs-boot", "hsc"]
roots = ["Setup.hs", "stack.yaml", "cabal.project"]
comment-token = "--"
block-comment-tokens = { start = "{-", end = "-}" }
language-servers = [ "haskell-language-server" ]
indent = { tab-width = 2, unit = "  " }
